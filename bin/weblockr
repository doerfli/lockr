#!/usr/bin/env ruby

require 'lockr/http/httplockrinit'
require 'erb'
require 'clipboard'  
require 'padrino-helpers'
require 'json'

include ERB::Util

init = HttpLockrInit.new()
init.start()

# now start sinatra
require 'sinatra'
require "sinatra/json"

if init.getLoadBrowser
  require "browser_gui"  
end

register Padrino::Helpers

set :pwdmgr, init.getPwdMgr()
# server config
set :public_dir, File.expand_path('../../resources/static', __FILE__) 
set :bind, '127.0.0.1'
set :port, 32187
set :views, File.expand_path('../../resources/views', __FILE__) 
enable :run
 
get '/' do
  dir = settings.pwdmgr.list()
  erb :index, :locals => { :directory => dir }
end

get '/password' do
  settings.pwdmgr.copy_to_clipboard( params[:id], params[:username])
  json({:message => "Password copied to clipboard. Clipboard reset in 15 seconds."})
end

post '/password' do
  json = convertFormToMap( request.body.read)
  newPwdstore = settings.pwdmgr.add( json['id'], json['username'], json['password'])
  dir = settings.pwdmgr.list()
  json({:message => "Site &quot;#{json['id']}/#{json['username']}&quot; added"})
end

patch '/password' do
  json = convertFormToMap( request.body.read)
  settings.pwdmgr.change( json['id'], json['username'], json['password'])
  json({:message => "Password for site &quot;#{json['id']}/#{json['username']}&quot; updated"})
end

delete '/password' do
  json = convertFormToMap( request.body.read)
  settings.pwdmgr.delete( json['id'], json['username'])
  json({:message => "Password for site &quot;#{json['id']}/#{json['username']}&quot; deleted"})
end

def convertFormToMap( jsonForm)
  Hash[JSON.parse(jsonForm).map{|el| [el['name'], el['value']]}]
end